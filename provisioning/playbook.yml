---
- hosts: all
  become: true

  vars:
    cert_dir: "/etc/letsencrypt/live/{{ hostname }}"
    http_dir: "/var/www/html"
    acme_dir: "/var/www/html/acme"
    root_dir: "/var/www/html/site"
    dh_param_path: "/etc/nginx/dhparam-2048.pem"

    # Tournament start (in timezone used by cron - by default UTC)
    tournament_hour: "14"
    tournament_minute: "50"
    tournament_day: "15"
    tournament_month: "11"

    # Registration end (in timezone used by cron - by default UTC)
    registration_end_hour: "13"
    registration_end_minute: "00"
    registration_end_day: "28"
    registration_end_month: "11"

    # Teeworlds files
    credentials_file: "/opt/teeworlds/creds.txt"
    database_file: "/opt/teeworlds/data/database"
    dump_script: "/opt/teeworlds/dump.sh"



  vars_files: "secrets.yml"



  pre_tasks:
    - name: Install required packages
      tags: [ always ]
      apt:
        name:
          - "sqlite3"
        state: "present"


    - name: Create nginx HTTP directories
      file:
        name: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: "755"
      loop:
        - "/etc/nginx"
        - "/var/www"
        - "/var/www/html"
        - "{{ root_dir }}"
        - "{{ acme_dir }}"
        - "{{ acme_dir }}/.well-known"
        - "{{ acme_dir }}/.well-known/acme-challenge"


    - name: Stat of DH parameters
      stat:
        path: "{{ dh_param_path }}"
      register: dh_parameters_stat


    - name: Generate DH parameters (if they don't exist)
      command: "/usr/bin/openssl dhparam -out {{ dh_param_path }} 2048"
      when: not dh_parameters_stat.stat.exists



  roles:
    - role: geerlingguy.nginx
      tags: [ certbot ]
      become: true
      nginx_sendfile: "on"
      nginx_access_log: "off"
      nginx_remove_default_vhost: true
      nginx_upstreams:
        - name: php-handler
          servers:
            {
              "127.0.0.1:9000"
            }
      nginx_vhosts:
        - listen: "[::]:80 ipv6only=off"
          server_name: "{{ hostname }}"
          filename: "acme.conf"
          root: "{{ acme_dir }}"
          extra_parameters: |
            log_not_found on;
            error_log /var/log/nginx/error.log debug;

            location /.well-known/acme-challenge {
              root {{ acme_dir }};
            }

            location / {
              return 301 https://$server_name$request_uri;
            }
          state: present


    - role: geerlingguy.php
      become: true
      php_enable_webserver: true  
      php_webserver_daemon: "nginx"
#      php_enablerepo: "remi-php73"   <== relevant for debian?
      php_packages:
        - php-common
        - php-fpm
        - php-opcache
        - php-sqlite3
      php_disable_functions:
        - exec
        - passthru
        - shell_exec
        - system
        - proc_open
        - popen
        - parse_ini_file
        - show_source
      php_enable_php_fpm: true
      php_enable_apc: false
      php_opcache_enable: "1"
      php_max_execution_time: "30"
      php_date_timezone: "Europe/Rome"
      php_memory_limit: "128M"
      php_upload_max_filesize: "100K"
      php_post_max_size: "100K"
      php_expose_php: "Off"
      php_opcache_memory_consumption: "64"


    - role: reload-nginx


    - role: geerlingguy.certbot
      tags: [ certbot ]
      become: true
      certbot_auto_renew: true
      certbot_auto_renew_hour: "3"    # Should dodge both late-nigth people and early-morning people.
      certbot_auto_renew_minute: "0"
      certbot_auto_renew_options: "--quiet --no-self-upgrade" # look up
      certbot_create_if_missing: true
      certbot_admin_email: "{{ admin_email }}"
      certbot_certs:
        - domains:
            - "{{ hostname }}"
      certbot_auto_renew_user: "root" # "{{ ansible_user | default(lookup('env', 'USER')) }}" <== I should probably change this to nginx or something
      certbot_create_command: >-
        {{ certbot_script }} certonly --webroot --noninteractive --agree-tos
        {% if use_test_cert | default(true) %}--staging{% endif %}
        -w {{ acme_dir }}
        --email {{ cert_item.email | default(certbot_admin_email) }}
        -d {{ cert_item.domains | join(',') }}
      certbot_create_standalone_stop_services: []


    # We need to do this now because otherwise when we reload nginx during first install the server will fail because the certificate does not exist
    - role: geerlingguy.nginx
      become: true
      nginx_sendfile: "on"
      nginx_access_log: "off"
      nginx_upstreams:
        - name: php-handler
          servers:
            {
              "127.0.0.1:9000"
            }
      nginx_vhosts:
        - listen: "[::]:443 ssl http2 ipv6only=off default_server"
          server_name: "{{ hostname }}"
          index: "index.php"
          root: "{{ root_dir }}"
          filename: "site.conf"
          state: present
          extra_parameters: |
            log_not_found on;
            error_log /var/log/nginx/error.log info;
            access_log /var/log/nginx/access.log;

            ssl_certificate     {{ cert_dir ~ '/fullchain.pem' }};
            ssl_certificate_key {{ cert_dir ~ '/privkey.pem' }};

            ssl_session_timeout 1d;
            ssl_session_cache shared:MozSSL:10m;
            ssl_session_tickets off;

            ssl_dhparam dhparam-2048.pem;

            ssl_protocols TLSv1.2 TLSv1.3;

            ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
            ssl_prefer_server_ciphers off;

            add_header Strict-Transport-Security "max-age=63072000" always;

            add_header Referrer-Policy "no-referrer" always;
            add_header X-Content-Type-Options "nosniff" always;
            add_header X-Download-Options "noopen" always;
            add_header X-Frame-Options "SAMEORIGIN" always;
            add_header X-Permitted-Cross-Domain-Policies "none" always;
            add_header X-Robots-Tag "none" always;
            add_header X-XSS-Protection "1; mode=block" always;
            fastcgi_hide_header X-Powered-By;

            location = /robots.txt {
                allow all;
                log_not_found off;
                access_log off;
            }
            
            location ~ ^/$ {
                rewrite ^ /index.php;
            }
            
            location ~ \.php$ {
              fastcgi_split_path_info ^(.+?\.php)(/.*)$;
              if (!-f $document_root$fastcgi_script_name) {
                  return 404;
              }

              # Mitigate https://httpoxy.org/ vulnerabilities
              fastcgi_param HTTP_PROXY "";

              fastcgi_pass php-handler;
              fastcgi_index index.php;

              # include the fastcgi_param setting
              include fastcgi_params;
              fastcgi_param  SCRIPT_FILENAME   $document_root$fastcgi_script_name;
            }



  tasks:
    - name: Force a rebuild
      tags: [ never, build ]
      set_fact:
        force_rebuild: true


#    - name: Locally clone PHPMailer from GitHub
#      tags: [ site, build ]
#      become: false
#      local_action:
#        module: "git"
#        dest: "files/phpmailer"
#        repo: "https://github.com/PHPMailer/PHPMailer"
#        version: "v6.1.7"
#        clone: yes
#        depth: 1
#      register: phpmailer_clone
#
#
#    - name: Create PHPMailer directory
#      tags: [ site, build ]
#      file:
#        path: "/usr/share/php/PHPMailer"
#        owner: "root"
#        group: "root"
#        mode: 0755
#        state: "directory"
#
#
#    - name: Stat the PHPMailer directory
#      tags: [ site, build ]
#      become: false
#      stat:
#        path: "/usr/share/php/PHPMailer/src"
#      register: phpmailer_stat
#
#
#    - name: Copy PHPMailer to /usr/share/php/PHPMailer
#      tags: [ site, build ]
#      copy:
#        src: "phpmailer/src"
#        dest: "/usr/share/php/PHPMailer"
#        owner: "root"
#        group: "root"
#        mode: 0755
#      when: (not phpmailer_stat.stat.exists or phpmailer_clone.changed) or (force_rebuild | default(false))


    - name: Create the teeworlds-db group
      tags: [ teeworlds, site ]
      group:
        name: "teeworlds-db"
        system: yes
        state: "present"


    - name: Create the teeworlds-db user
      tags: [ teeworlds, site ]
      user:
        name: "teeworlds-db"
        group: "teeworlds-db"
        password: "!"
        shell: "/usr/sbin/nologin"
        system: yes
        create_home: no
        state: "present"


    - name: Add user www-data to group teeworlds-db
      tags: [ teeworlds, site ]
      user:
        name: "www-data"
        groups: "teeworlds-db"


    - name: Add user teeworlds to group teeworlds-db
      tags: [ teeworlds, site ]
      user:
        name: "teeworlds"
        groups: "teeworlds-db"


    - name: Remove previous site files
      tags: [ site ]
      file:
        state: "absent"
        path: "{{ root_dir }}"
        owner: "root"
        group: "root"
        mode: 0755


    - name: Copy site files to NGINX
      tags: [ site ]
      copy:
          src: nginx-site-files
          dest: "{{ http_dir }}"
          owner: "root"
          group: "root"
          mode: 0555


    - name: Move copied folder to {{ root_dir }}
      tags: [ site ]
      command:
        cmd: "mv {{ http_dir }}/nginx-site-files {{ root_dir }}"
    
    
    - name: Set permissions on NGINX root
      tags: [ site ]
      file:
        state: "directory"
        path: "{{ root_dir }}"
        owner: "root"
        group: "teeworlds-db"
        mode: 0775


    - name: Stat config.php
      tags: [ site ]
      stat:
        path: "{{ root_dir }}/config.php"
      register: config_stat


    - name: Copy example config.php
      tags: [ site ]
      copy:
        remote_src: yes
        src: "{{ root_dir }}/config-example.php"
        dest: "{{ root_dir }}/config.php"
      when: not config_stat.stat.exists


    - name: Restart nginx
      tags: [ site ]
      service:
        name: "nginx"
        state: "restarted"


    - name: Locally clone Teeworlds from GitHub
      tags: [ teeworlds, build ]
      become: false
      local_action:
        module: "git"
        dest: "files/teeworlds/teeworlds"
        repo: "https://github.com/alecello/teeworlds"
        version: "tournament"
        clone: yes
        depth: 1
      register: teeworlds_clone


    - name: Locally clone BAM into Teeworlds directory
      tags: [ teeworlds, build ]
      become: false
      local_action:
        module: "git"
        dest: "files/teeworlds/teeworlds/bam"
        repo: "https://github.com/matricks/bam"
        version: "a23a89d580a0408ca330ab42857157e443ec9b6f"
        clone: yes
        depth: 1
      register: bam_clone


    - name: Stat the bam executable
      tags: [ teeworlds, build ]
      become: false
      local_action:
        module: "stat"
        path: "files/teeworlds/teeworlds/bam/bam" # It looks like a joke honestly
      register: bam_executable


    - name: Stat the server executable
      tags: [ teeworlds, build ]
      become: false
      local_action:
        module: "stat"
        path: "files/teeworlds/teeworlds/build/x86_64/release/teeworlds_srv"
      register: teeworlds_executable


    - name: Compile bam if required
      tags: [ teeworlds, build ]
      become: false
      local_action:
        module: "shell"
        chdir: "files/teeworlds/teeworlds/bam"
        cmd: "./make_unix.sh" 
      when: (not bam_executable.stat.exists or bam_clone.changed) or (force_rebuild | default(false))


    - name: Compile teeworlds if required
      tags: [ teeworlds, build ]
      become: false
      local_action:
        module: "shell"
        chdir: "files/teeworlds/teeworlds"
        cmd: "./bam/bam config; ./bam/bam conf=release server content"
      when: (not teeworlds_executable.stat.exists or teeworlds_clone.changed) or (force_rebuild | default(false))


    - name: Create the teeworlds group
      tags: [ teeworlds ]
      group:
        name: "teeworlds"
        system: yes
        state: "present"


    - name: Create the teeworlds user
      tags: [ teeworlds ]
      user:
        name: "teeworlds"
        group: "teeworlds"
        password: "!"
        shell: "/usr/sbin/nologin"
        system: yes
        create_home: no
        state: "present"


    - name: Install Teeworlds server service
      tags: [ teeworlds ]
      copy:
        src: "files/teeworlds/files/teeworlds-server.service"
        dest: "/etc/systemd/system/teeworlds-server.service"
        owner: "root"
        group: "root"
        mode: 0644


    - name: Install Teeworlds database service
      tags: [ teeworlds ]
      copy:
        src: "files/teeworlds/database/teeworlds-db.service"
        dest: "/etc/systemd/system/teeworlds-db.service"
        owner: "root"
        group: "root"
        mode: 0644


    - name: Reload systemd daemon
      tags: [ teeworlds ]
      command:
        cmd: "systemctl daemon-reload"


    - name: Stop the teeworlds service
      tags: [ teeworlds ]
      service:
        name: "teeworlds-server"
        state: "stopped"


    - name: Stop the database service
      tags: [ teeworlds ]
      service:
        name: "teeworlds-db"
        state: "stopped"


    - name: Create teeworlds directory on the remote host
      tags: [ teeworlds ]
      file:
        path: "/opt/teeworlds"
        state: "directory"
        owner: "teeworlds"
        group: "teeworlds"
        mode: 0755


    - name: Create data directory on the remote host
      tags: [ teeworlds ]
      file:
        path: "/opt/teeworlds/data"
        state: "directory"
        owner: "teeworlds-db"
        group: "teeworlds-db"
        mode: 0775


    - name: Copy teeworlds executable to remote host
      tags: [ teeworlds, build ]
      copy:
        src: "files/teeworlds/teeworlds/build/x86_64/release/teeworlds_srv"
        dest: "/opt/teeworlds/server"
        owner: "root"
        group: "root"
        mode: 0555


    - name: Copy database script to remote host
      tags: [ teeworlds ]
      copy:
        src: "files/teeworlds/database/database.py"
        dest: "/opt/teeworlds/database.py"
        owner: "root"
        group: "root"
        mode: 0555
    
    
    - name: Copy database dump script to remote host
      tags: [ teeworlds ]
      copy:
        src: "files/teeworlds/database/dump.sh"
        dest: "/opt/teeworlds/dump.sh"
        owner: "root"
        group: "root"
        mode: 0555


    - name: Copy teeworlds tournament configuration to remote host
      tags: [ teeworlds ]
      copy:
        src: "files/teeworlds/files/autoexec-tournament.cfg"
        dest: "/opt/teeworlds/autoexec-tournament.cfg"
        owner: "teeworlds"
        group: "teeworlds"
        mode: 0400


    - name: Copy teeworlds warmup configuration to remote host
      tags: [ teeworlds ]
      copy:
        src: "files/teeworlds/files/autoexec-warmup.cfg"
        dest: "/opt/teeworlds/autoexec-warmup.cfg"
        owner: "teeworlds"
        group: "teeworlds"
        mode: 0400


    - name: Copy storage configuration to remote host
      tags: [ teeworlds ]
      copy:
        src: "files/teeworlds/files/storage.cfg"
        dest: "/opt/teeworlds/storage.cfg"
        owner: "teeworlds"
        group: "teeworlds"
        mode: 0400


    - name: Copy maps to remote host
      tags: [ teeworlds ]
      copy:
        src: "files/teeworlds/maps"
        dest: "/opt/teeworlds/data/"
        owner: "teeworlds"
        group: "teeworlds"
  

    - name: Copy map data to remote host
      tags: [ teeworlds ]
      copy:
        src: "files/teeworlds/teeworlds/build/x86_64/release/data/mapres"
        dest: "/opt/teeworlds/data/"
        owner: "teeworlds"
        group: "teeworlds"


    - name: Create credentials file (if it does not exist)
      tags: [ teeworlds ]
      file:
        path: "/opt/teeworlds/creds.txt"
        owner: "teeworlds"
        group: "teeworlds"
        mode: 0600
        state: "touch"


    - name: Create administators file (if it does not exist)
      tags: [ teeworlds ]
      file:
        path: "/opt/teeworlds/admin.txt"
        owner: "teeworlds"
        group: "teeworlds"
        mode: 0600
        state: "touch"


    - name: Create kills file (if it does not exist)
      tags: [ teeworlds ]
      file:
        path: "/opt/teeworlds/kills.log"
        owner: "teeworlds"
        group: "teeworlds"
        mode: 0600
        state: "touch"

    
    - name: Create empty database (if it does not exist)
      tags: [ teeworlds, db ]
      shell:
        cmd: "sqlite3 database 'VACUUM;'"
        chdir: "/opt/teeworlds/data"
        creates: "/opt/teeworlds/data/database"


    - name: Set permissions for the database file
      tags: [ teeworlds, db ]
      file:
        path: "/opt/teeworlds/data/database"
        owner: "teeworlds-db"
        group: "teeworlds-db"
        mode: 0660
        state: "file"


    - name: Start the database service
      tags: [ teeworlds ]
      service:
        name: "teeworlds-db"
        state: "started"


    - name: Start the server service
      tags: [ teeworlds ]
      service:
        name: "teeworlds-server@warmup"
        state: "started"


    - name: Set cron job to stop registrations
      tags: [ site, db ]
      cron:
        name: "Close registrations"

        hour: "{{ registration_end_hour }}"
        minute: "{{ registration_end_minute }}"
        day: "{{ registration_end_day }}"
        month: "{{ registration_end_month }}"

        job: "systemctl stop teeworlds-server@warmup.service; cp {{ root_dir }}/config.php {{ root_dir }}/config.bak; sed 's/\"REGISTRATIONS_ENABLED\", true/\"REGISTRATIONS_ENABLED\", false/g' {{ root_dir }}/config.bak > {{ root_dir }}/config.php"
        user: "root"


    - name: Set cron job to dump the start the server
      tags: [ teeworlds, db ]
      cron:
        name: "Start tournament"

        hour: "{{ tournament_hour }}"
        minute: "{{ tournament_minute }}"
        day: "{{ tournament_day }}"
        month: "{{ tournament_month }}"

        job: "sudo -u teeworlds {{ dump_script }} {{ database_file }} {{ credentials_file }}; systemctl start teeworlds-server@tournament.service"
        user: "root"